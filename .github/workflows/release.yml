name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        type: string

env:
  GO_VERSION: "1.23"

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

      - name: Download dependencies
        run: go mod download

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Build for multiple platforms
        run: |
          # Create build directory
          mkdir -p dist

          # Build for Linux AMD64
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o dist/protobuf-mcp-linux-amd64 ./cmd/protobuf-mcp

          # Build for Linux ARM64
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o dist/protobuf-mcp-linux-arm64 ./cmd/protobuf-mcp

          # Build for Windows AMD64
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o dist/protobuf-mcp-windows-amd64.exe ./cmd/protobuf-mcp

          # Build for macOS AMD64
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o dist/protobuf-mcp-darwin-amd64 ./cmd/protobuf-mcp

          # Build for macOS ARM64
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o dist/protobuf-mcp-darwin-arm64 ./cmd/protobuf-mcp

      - name: Create checksums
        run: |
          cd dist
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Create release archive
        run: |
          cd dist
          tar -czf protobuf-mcp-${{ steps.version.outputs.version }}-linux-amd64.tar.gz protobuf-mcp-linux-amd64 checksums.txt
          tar -czf protobuf-mcp-${{ steps.version.outputs.version }}-linux-arm64.tar.gz protobuf-mcp-linux-arm64 checksums.txt
          zip protobuf-mcp-${{ steps.version.outputs.version }}-windows-amd64.zip protobuf-mcp-windows-amd64.exe checksums.txt
          tar -czf protobuf-mcp-${{ steps.version.outputs.version }}-darwin-amd64.tar.gz protobuf-mcp-darwin-amd64 checksums.txt
          tar -czf protobuf-mcp-${{ steps.version.outputs.version }}-darwin-arm64.tar.gz protobuf-mcp-darwin-arm64 checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/*.tar.gz
            dist/*.zip
          body: |
            ## Protobuf MCP Server ${{ steps.version.outputs.version }}

            ### Installation

            Download the appropriate binary for your platform:

            - **Linux AMD64**: `protobuf-mcp-linux-amd64.tar.gz`
            - **Linux ARM64**: `protobuf-mcp-linux-arm64.tar.gz`
            - **Windows AMD64**: `protobuf-mcp-windows-amd64.zip`
            - **macOS AMD64**: `protobuf-mcp-darwin-amd64.tar.gz`
            - **macOS ARM64**: `protobuf-mcp-darwin-arm64.tar.gz`

            ### Quick Start

            ```bash
            # Extract and run
            tar -xzf protobuf-mcp-*-linux-amd64.tar.gz
            ./protobuf-mcp --help

            # Or use go install
            go install github.com/yuemori/protobuf-mcp-server/cmd/protobuf-mcp@${{ steps.version.outputs.version }}
            ```

            ### Changes

            See the [changelog](https://github.com/yuemori/protobuf-mcp-server/blob/main/CHANGELOG.md) for detailed changes.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
